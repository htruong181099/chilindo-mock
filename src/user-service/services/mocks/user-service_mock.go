// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/user-service/services/user-service.go

// Package services is a generated GoMock package.
package services

import (
	dto "chilindo/src/user-service/dto"
	models "chilindo/src/user-service/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIUserService is a mock of IUserService interface.
type MockIUserService struct {
	ctrl     *gomock.Controller
	recorder *MockIUserServiceMockRecorder
}

// MockIUserServiceMockRecorder is the mock recorder for MockIUserService.
type MockIUserServiceMockRecorder struct {
	mock *MockIUserService
}

// NewMockIUserService creates a new mock instance.
func NewMockIUserService(ctrl *gomock.Controller) *MockIUserService {
	mock := &MockIUserService{ctrl: ctrl}
	mock.recorder = &MockIUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserService) EXPECT() *MockIUserServiceMockRecorder {
	return m.recorder
}

// CreateAddress mocks base method.
func (m *MockIUserService) CreateAddress(dto *dto.AddressDTO) (*models.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAddress", dto)
	ret0, _ := ret[0].(*models.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAddress indicates an expected call of CreateAddress.
func (mr *MockIUserServiceMockRecorder) CreateAddress(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAddress", reflect.TypeOf((*MockIUserService)(nil).CreateAddress), dto)
}

// DeletedAddressById mocks base method.
func (m *MockIUserService) DeletedAddressById(dto *dto.GetAddressByIdDTO) (*models.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletedAddressById", dto)
	ret0, _ := ret[0].(*models.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletedAddressById indicates an expected call of DeletedAddressById.
func (mr *MockIUserServiceMockRecorder) DeletedAddressById(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletedAddressById", reflect.TypeOf((*MockIUserService)(nil).DeletedAddressById), dto)
}

// GetAddress mocks base method.
func (m *MockIUserService) GetAddress(dto *dto.GetAddressDTO) (*[]models.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddress", dto)
	ret0, _ := ret[0].(*[]models.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddress indicates an expected call of GetAddress.
func (mr *MockIUserServiceMockRecorder) GetAddress(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddress", reflect.TypeOf((*MockIUserService)(nil).GetAddress), dto)
}

// GetAddressById mocks base method.
func (m *MockIUserService) GetAddressById(dto *dto.GetAddressByIdDTO) (*models.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddressById", dto)
	ret0, _ := ret[0].(*models.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddressById indicates an expected call of GetAddressById.
func (mr *MockIUserServiceMockRecorder) GetAddressById(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddressById", reflect.TypeOf((*MockIUserService)(nil).GetAddressById), dto)
}

// GetUserById mocks base method.
func (m *MockIUserService) GetUserById(dto *dto.GetByUserIdDTO) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", dto)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockIUserServiceMockRecorder) GetUserById(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockIUserService)(nil).GetUserById), dto)
}

// UpdateAddressById mocks base method.
func (m *MockIUserService) UpdateAddressById(dto *dto.AddressDTO) (*models.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAddressById", dto)
	ret0, _ := ret[0].(*models.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAddressById indicates an expected call of UpdateAddressById.
func (mr *MockIUserServiceMockRecorder) UpdateAddressById(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAddressById", reflect.TypeOf((*MockIUserService)(nil).UpdateAddressById), dto)
}

// UpdatePassword mocks base method.
func (m *MockIUserService) UpdatePassword(dto *dto.UpdatePasswordDTO) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", dto)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockIUserServiceMockRecorder) UpdatePassword(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockIUserService)(nil).UpdatePassword), dto)
}
