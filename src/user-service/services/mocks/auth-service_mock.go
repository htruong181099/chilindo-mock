// Code generated by MockGen. DO NOT EDIT.
// Source: .\src\user-service\services\auth-service.go

// Package services is a generated GoMock package.
package services

import (
	admin "chilindo/pkg/pb/admin"
	dto "chilindo/src/user-service/dto"
	models "chilindo/src/user-service/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIAuthService is a mock of IAuthService interface.
type MockIAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockIAuthServiceMockRecorder
}

// MockIAuthServiceMockRecorder is the mock recorder for MockIAuthService.
type MockIAuthServiceMockRecorder struct {
	mock *MockIAuthService
}

// NewMockIAuthService creates a new mock instance.
func NewMockIAuthService(ctrl *gomock.Controller) *MockIAuthService {
	mock := &MockIAuthService{ctrl: ctrl}
	mock.recorder = &MockIAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuthService) EXPECT() *MockIAuthServiceMockRecorder {
	return m.recorder
}

// CheckIsAdmin mocks base method.
func (m *MockIAuthService) CheckIsAdmin(req *admin.CheckIsAdminRequest) (*admin.CheckIsAdminResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIsAdmin", req)
	ret0, _ := ret[0].(*admin.CheckIsAdminResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIsAdmin indicates an expected call of CheckIsAdmin.
func (mr *MockIAuthServiceMockRecorder) CheckIsAdmin(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIsAdmin", reflect.TypeOf((*MockIAuthService)(nil).CheckIsAdmin), req)
}

// CheckUserAuth mocks base method.
func (m *MockIAuthService) CheckUserAuth(req *admin.CheckUserAuthRequest) (*admin.CheckUserAuthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserAuth", req)
	ret0, _ := ret[0].(*admin.CheckUserAuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserAuth indicates an expected call of CheckUserAuth.
func (mr *MockIAuthServiceMockRecorder) CheckUserAuth(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserAuth", reflect.TypeOf((*MockIAuthService)(nil).CheckUserAuth), req)
}

// SignIn mocks base method.
func (m *MockIAuthService) SignIn(dto *dto.SignInDTO) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", dto)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockIAuthServiceMockRecorder) SignIn(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockIAuthService)(nil).SignIn), dto)
}

// SignUp mocks base method.
func (m *MockIAuthService) SignUp(dto *dto.SignUpDTO) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", dto)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUp indicates an expected call of SignUp.
func (mr *MockIAuthServiceMockRecorder) SignUp(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockIAuthService)(nil).SignUp), dto)
}
