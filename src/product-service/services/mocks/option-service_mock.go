// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/product-service/services/option-service.go

// Package services is a generated GoMock package.
package services

import (
	dtos "chilindo/src/product-service/dtos"
	models "chilindo/src/product-service/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIOptionService is a mock of IOptionService interface.
type MockIOptionService struct {
	ctrl     *gomock.Controller
	recorder *MockIOptionServiceMockRecorder
}

// MockIOptionServiceMockRecorder is the mock recorder for MockIOptionService.
type MockIOptionServiceMockRecorder struct {
	mock *MockIOptionService
}

// NewMockIOptionService creates a new mock instance.
func NewMockIOptionService(ctrl *gomock.Controller) *MockIOptionService {
	mock := &MockIOptionService{ctrl: ctrl}
	mock.recorder = &MockIOptionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIOptionService) EXPECT() *MockIOptionServiceMockRecorder {
	return m.recorder
}

// CreateOption mocks base method.
func (m *MockIOptionService) CreateOption(dto *dtos.CreateOption) (*models.Option, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOption", dto)
	ret0, _ := ret[0].(*models.Option)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOption indicates an expected call of CreateOption.
func (mr *MockIOptionServiceMockRecorder) CreateOption(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOption", reflect.TypeOf((*MockIOptionService)(nil).CreateOption), dto)
}

// DeleteOption mocks base method.
func (m *MockIOptionService) DeleteOption(dto *dtos.OptionById) (*models.Option, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOption", dto)
	ret0, _ := ret[0].(*models.Option)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOption indicates an expected call of DeleteOption.
func (mr *MockIOptionServiceMockRecorder) DeleteOption(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOption", reflect.TypeOf((*MockIOptionService)(nil).DeleteOption), dto)
}

// GetOption mocks base method.
func (m *MockIOptionService) GetOption(dto *dtos.OptionById) (*[]models.Option, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOption", dto)
	ret0, _ := ret[0].(*[]models.Option)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOption indicates an expected call of GetOption.
func (mr *MockIOptionServiceMockRecorder) GetOption(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOption", reflect.TypeOf((*MockIOptionService)(nil).GetOption), dto)
}

// GetOptionById mocks base method.
func (m *MockIOptionService) GetOptionById(dto *dtos.OptionById) (*models.Option, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOptionById", dto)
	ret0, _ := ret[0].(*models.Option)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOptionById indicates an expected call of GetOptionById.
func (mr *MockIOptionServiceMockRecorder) GetOptionById(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOptionById", reflect.TypeOf((*MockIOptionService)(nil).GetOptionById), dto)
}

// UpdateOption mocks base method.
func (m *MockIOptionService) UpdateOption(dto *dtos.UpdateOptionBy) (*models.Option, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOption", dto)
	ret0, _ := ret[0].(*models.Option)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOption indicates an expected call of UpdateOption.
func (mr *MockIOptionServiceMockRecorder) UpdateOption(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOption", reflect.TypeOf((*MockIOptionService)(nil).UpdateOption), dto)
}
