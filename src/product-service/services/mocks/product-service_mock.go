// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/product-service/services/product-service.go

// Package services is a generated GoMock package.
package services

import (
	dtos "chilindo/src/product-service/dtos"
	models "chilindo/src/product-service/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIProductService is a mock of IProductService interface.
type MockIProductService struct {
	ctrl     *gomock.Controller
	recorder *MockIProductServiceMockRecorder
}

// MockIProductServiceMockRecorder is the mock recorder for MockIProductService.
type MockIProductServiceMockRecorder struct {
	mock *MockIProductService
}

// NewMockIProductService creates a new mock instance.
func NewMockIProductService(ctrl *gomock.Controller) *MockIProductService {
	mock := &MockIProductService{ctrl: ctrl}
	mock.recorder = &MockIProductServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProductService) EXPECT() *MockIProductServiceMockRecorder {
	return m.recorder
}

// CreateOption mocks base method.
func (m *MockIProductService) CreateOption(dto *dtos.CreateOptionDTO) (*models.Option, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOption", dto)
	ret0, _ := ret[0].(*models.Option)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOption indicates an expected call of CreateOption.
func (mr *MockIProductServiceMockRecorder) CreateOption(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOption", reflect.TypeOf((*MockIProductService)(nil).CreateOption), dto)
}

// CreateProduct mocks base method.
func (m *MockIProductService) CreateProduct(dto *dtos.CreateProductDTO) (*models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", dto)
	ret0, _ := ret[0].(*models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockIProductServiceMockRecorder) CreateProduct(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockIProductService)(nil).CreateProduct), dto)
}

// DeleteOption mocks base method.
func (m *MockIProductService) DeleteOption(dto *dtos.OptionIdDTO) (*models.Option, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOption", dto)
	ret0, _ := ret[0].(*models.Option)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOption indicates an expected call of DeleteOption.
func (mr *MockIProductServiceMockRecorder) DeleteOption(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOption", reflect.TypeOf((*MockIProductService)(nil).DeleteOption), dto)
}

// DeleteProduct mocks base method.
func (m *MockIProductService) DeleteProduct(dto *dtos.ProductDTO) (*models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", dto)
	ret0, _ := ret[0].(*models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockIProductServiceMockRecorder) DeleteProduct(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockIProductService)(nil).DeleteProduct), dto)
}

// GetOptionById mocks base method.
func (m *MockIProductService) GetOptionById(dto *dtos.OptionIdDTO) (*models.Option, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOptionById", dto)
	ret0, _ := ret[0].(*models.Option)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOptionById indicates an expected call of GetOptionById.
func (mr *MockIProductServiceMockRecorder) GetOptionById(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOptionById", reflect.TypeOf((*MockIProductService)(nil).GetOptionById), dto)
}

// GetOptions mocks base method.
func (m *MockIProductService) GetOptions(dto *dtos.ProductIdDTO) (*[]models.Option, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOptions", dto)
	ret0, _ := ret[0].(*[]models.Option)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOptions indicates an expected call of GetOptions.
func (mr *MockIProductServiceMockRecorder) GetOptions(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOptions", reflect.TypeOf((*MockIProductService)(nil).GetOptions), dto)
}

// GetProductById mocks base method.
func (m *MockIProductService) GetProductById(dto *dtos.ProductDTO) (*models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductById", dto)
	ret0, _ := ret[0].(*models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductById indicates an expected call of GetProductById.
func (mr *MockIProductServiceMockRecorder) GetProductById(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductById", reflect.TypeOf((*MockIProductService)(nil).GetProductById), dto)
}

// GetProducts mocks base method.
func (m *MockIProductService) GetProducts() (*[]models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducts")
	ret0, _ := ret[0].(*[]models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProducts indicates an expected call of GetProducts.
func (mr *MockIProductServiceMockRecorder) GetProducts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducts", reflect.TypeOf((*MockIProductService)(nil).GetProducts))
}

// UpdateOption mocks base method.
func (m *MockIProductService) UpdateOption(dto *dtos.UpdateOptionDTO) (*models.Option, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOption", dto)
	ret0, _ := ret[0].(*models.Option)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOption indicates an expected call of UpdateOption.
func (mr *MockIProductServiceMockRecorder) UpdateOption(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOption", reflect.TypeOf((*MockIProductService)(nil).UpdateOption), dto)
}

// UpdateProduct mocks base method.
func (m *MockIProductService) UpdateProduct(dto *dtos.UpdateProductDTO) (*models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", dto)
	ret0, _ := ret[0].(*models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockIProductServiceMockRecorder) UpdateProduct(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockIProductService)(nil).UpdateProduct), dto)
}
